var mymap = L.map("mapid", {
        zoomControl: false,
        scrollWheelZoom: false
    }).setView([31, 110], 2),
    southWest = L.latLng(-900, -200),
    northEast = L.latLng(900, 200);
    bounds = L.latLngBounds(southWest, northEast),
    mymap.setMaxBounds(bounds),
    d3.json("./data/countries.topojson", function(a, b) {
        function c() {
            for (var a = f.length - 1; a >= 0; a--)
                f[a].isEnd() ? f[a].isCleaning || (f[a].isCleaning = !0, f[a].delete(), f.splice(a, 1)) : (f[a].update(), f[a].render())
        }

        var d = topojson.feature(b, b.objects.subunits);
        L.geoJSON(d, {
            style: {

                // Set map border color
                color: "#1dd7ff",
                opacity: 1,
                weight: 0.75,

                // Set map background color
                fillColor: "#25284d",
                fillOpacity: 0.20
            }
        }).addTo(mymap);



        var e = d3.select("#mapid").select("svg"),
            f = (e.append("g"), []);
        mymap.on("zoomend", c), setInterval(function() {
            if (f.length < connect_point.length && Math.random() < .2) {
                f.push(new Connect(mymap, e));
                var a = Math.round((connect_point.length - 1) * Math.random());
                var target = connect_point[a].to;
                var attacker = connect_point[a].from;
                f[f.length - 1].setPlaneColor(attacker.color),
                    f[f.length - 1].setRoadColor(attacker.color),
                    f[f.length - 1].setBeginColor(attacker.color),
                    f[f.length - 1].setEndColor(target.color),
                    f[f.length - 1].init({
                        lat: attacker.pos[0],
                        lng: attacker.pos[1]
                    }, {
                        lat: target.pos[0],
                        lng: target.pos[1]
                    });
                $('#live_attacked .table tbody').prepend('<tr class="animated fadeIn"><td>' + attacker.timestamp + '</td><td>' + attacker.name + '</td><td>' + attacker.ip + '</td><td>' + attacker.region + '</td><td>' + attacker.region + '</td><td>' + attacker.type + '</td><td>' + attacker.port + '</td></tr>');
                if ($('#live_attacked .table tbody tr').length > 8) {
                    $('#live_attacked .table tbody tr').last().remove();
                }
            }
            c()
        }, 1);

    });

function startTime() {
    var today = new Date();
    var h = today.getHours();
    var m = today.getMinutes();
    var s = today.getSeconds();
    var ms = today.getMilliseconds();
    m = checkTime(m);
    s = checkTime(s);
    ms = formatMS(ms);
    //document.getElementById('time').innerHTML = checkTime(h) + ":" + m + ":" + s + ":" + ms;
    document.getElementById('hh').innerHTML = checkTime(h);
    document.getElementById('mm').innerHTML = m;
    document.getElementById('ss').innerHTML = s;
    document.getElementById('ms').innerHTML = ms;
    var t = setTimeout(startTime, 10);
}

function setDate(){
    var today = new Date();
    var weekday_names = 'MON TUE WED THU FRI SAT SUN'.split(' ');
    var date = today.getDate() + "-" + checkTime(today.getMonth() + 1) + "-" + today.getFullYear();
    var day_in_week = weekday_names[today.getDay()];
    $('#date .pull-right').html(day_in_week);
    $('#date .pull-left').html(date);
    var t = setTimeout(setDate, 3600);
}

function checkTime(i) {
    if (i < 10) { i = "0" + i }; // add zero in front of numbers < 10
    return i;
}

function formatMS(i){
    if( i < 100 & i > 9) { i = "0" + i };
    if( i < 9 ) { i = "00" + i };     
    return i;
}

(function() {
    setDate();
    startTime();
})();
